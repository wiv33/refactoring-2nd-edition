package org.psawesome.tdd.treeCircuit;

import org.jsoup.select.Elements;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * package: org.psawesome.tdd.treeCircuit
 * author: PS
 * DATE: 2020-05-17 일요일 12:41
 */
class WikiFetcherTest {
    String url = "https://en.wikipedia.org/wiki/Java_(programming_language)";

    @Test
    void testInitFetcher() {

        WikiFetcher wikiFetcher = new WikiFetcher();
        Elements elements = wikiFetcher.fetchWikipedia(url);
        assertNotNull(elements);
    }

    @Test
    void testRunFetcher() {
        WikiFetcher wk = new WikiFetcher();
        Elements elements = wk.fetchWikipedia(url);


        // expect
        /*
            Stream.of(url1, url2, url3, url4, ... )
            .forEach(v -> {
                Elements ele = wk.fetchWikipedia(v);
                processParagraphs(ele);
             }
         */

        elements.forEach(System.out::println);

/*
        result:
<p class="mw-empty-elt"> </p>
<p><b>Java</b> is a <a href="/wiki/General-purpose_language" title="General-purpose language">general-purpose</a> <a href="/wiki/Programming_language" title="Programming language">programming language</a> that is <a href="/wiki/Class-based_programming" title="Class-based programming">class-based</a>, <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">object-oriented</a>, and designed to have as few implementation <a href="/wiki/Dependency_(computer_science)" class="mw-redirect" title="Dependency (computer science)">dependencies</a> as possible. It is intended to let <a href="/wiki/Application_developer" class="mw-redirect" title="Application developer">application developers</a> <i>write once, run anywhere</i> (WORA),<sup id="cite_ref-17" class="reference"><a href="#cite_note-17">[17]</a></sup> meaning that <a href="/wiki/Compiler" title="Compiler">compiled</a> Java code can run on all platforms that support Java without the need for recompilation.<sup id="cite_ref-design_goals_18-0" class="reference"><a href="#cite_note-design_goals-18">[18]</a></sup> Java applications are typically compiled to <a href="/wiki/Java_bytecode" title="Java bytecode">bytecode</a> that can run on any <a href="/wiki/Java_virtual_machine" title="Java virtual machine">Java virtual machine</a> (JVM) regardless of the underlying <a href="/wiki/Computer_architecture" title="Computer architecture">computer architecture</a>. The <a href="/wiki/Syntax_(programming_languages)" title="Syntax (programming languages)">syntax</a> of <a href="/wiki/Java_(software_platform)" title="Java (software platform)">Java</a> is similar to <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> and <a href="/wiki/C%2B%2B" title="C++">C++</a>, but it has fewer <a href="/wiki/Low-level_programming_language" title="Low-level programming language">low-level</a> facilities than either of them. As of 2019<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Java_(programming_language)&amp;action=edit">[update]</a></sup>, Java was one of the most <a href="/wiki/Measuring_programming_language_popularity" title="Measuring programming language popularity">popular programming languages in use</a> according to <a href="/wiki/GitHub" title="GitHub">GitHub</a>,<sup id="cite_ref-:0_19-0" class="reference"><a href="#cite_note-:0-19">[19]</a></sup><sup id="cite_ref-20" class="reference"><a href="#cite_note-20">[20]</a></sup> particularly for <a href="/wiki/Client%E2%80%93server" class="mw-redirect" title="Client?server">client-server</a> <a href="/wiki/Web_applications" class="mw-redirect" title="Web applications">web applications</a>, with a reported 9 million developers.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21">[21]</a></sup> </p>
<p>Java was originally developed by <a href="/wiki/James_Gosling" title="James Gosling">James Gosling</a> at <a href="/wiki/Sun_Microsystems" title="Sun Microsystems">Sun Microsystems</a> (<a href="/wiki/Sun_acquisition_by_Oracle" title="Sun acquisition by Oracle">which has since been acquired by Oracle</a>) and released in 1995 as a core component of Sun Microsystems' <a href="/wiki/Java_(software_platform)" title="Java (software platform)">Java platform</a>. The original and <a href="/wiki/Reference_implementation" title="Reference implementation">reference implementation</a> Java <a href="/wiki/Compiler" title="Compiler">compilers</a>, virtual machines, and <a href="/wiki/Library_(computing)" title="Library (computing)">class libraries</a> were originally released by Sun under <a href="/wiki/Proprietary_license" class="mw-redirect" title="Proprietary license">proprietary licenses</a>. As of May 2007, in compliance with the specifications of the <a href="/wiki/Java_Community_Process" title="Java Community Process">Java Community Process</a>, Sun had <a href="/wiki/Software_relicensing" title="Software relicensing">relicensed</a> most of its Java technologies under the <a href="/wiki/GNU_General_Public_License" title="GNU General Public License">GNU General Public License</a>. Meanwhile, others have developed alternative implementations of these Sun technologies, such as the <a href="/wiki/GNU_Compiler_for_Java" title="GNU Compiler for Java">GNU Compiler for Java</a> (bytecode compiler), <a href="/wiki/GNU_Classpath" title="GNU Classpath">GNU Classpath</a> (standard libraries), and <a href="/wiki/IcedTea" title="IcedTea">IcedTea</a>-Web (browser plugin for applets). </p>
<p>The latest versions are <a href="/wiki/Java_version_history" title="Java version history">Java&nbsp;14</a>, released in March 2020, and Java&nbsp;11, a currently supported <a href="/wiki/Long-term_support" title="Long-term support">long-term support</a> (LTS) version, released on September 25, 2018; <a href="/wiki/Oracle_Corporation" title="Oracle Corporation">Oracle</a> released for the <a href="/wiki/Legacy_system" title="Legacy system">legacy</a> <a href="/wiki/Java_8" class="mw-redirect" title="Java 8">Java&nbsp;8</a>&nbsp;LTS the last free public update in January 2019 for commercial use, while it will otherwise still support Java&nbsp;8 with public updates for personal use up to at least December 2020. Oracle (and others) highly recommend uninstalling older versions of Java because of serious risks due to unresolved security issues.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22">[22]</a></sup> Since Java 9, 10, 12 and 13 are no longer supported, Oracle advises its users to immediately transition to the latest version (currently Java 14) or an LTS release. </p>
<p><a href="/wiki/James_Gosling" title="James Gosling">James Gosling</a>, Mike Sheridan, and <a href="/wiki/Patrick_Naughton" title="Patrick Naughton">Patrick Naughton</a> initiated the Java language project in June 1991.<sup id="cite_ref-23" class="reference"><a href="#cite_note-23">[23]</a></sup> Java was originally designed for interactive television, but it was too advanced for the digital cable television industry at the time.<sup id="cite_ref-24" class="reference"><a href="#cite_note-24">[24]</a></sup> The language was initially called <i><a href="/wiki/Oak_(programming_language)" title="Oak (programming language)">Oak</a></i> after an <a href="/wiki/Oak" title="Oak">oak</a> tree that stood outside Gosling's office. Later the project went by the name <i>Green</i> and was finally renamed <i>Java</i>, from <a href="/wiki/Java_coffee" class="mw-redirect" title="Java coffee">Java coffee</a>, the coffee from <a href="/wiki/Indonesia" title="Indonesia">Indonesia</a>.<sup id="cite_ref-25" class="reference"><a href="#cite_note-25">[25]</a></sup> Gosling designed Java with a <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>/<a href="/wiki/C%2B%2B" title="C++">C++</a>-style syntax that system and application programmers would find familiar.<sup id="cite_ref-26" class="reference"><a href="#cite_note-26">[26]</a></sup> </p>
<p>Sun Microsystems released the first public implementation as Java&nbsp;1.0 in 1996.<sup id="cite_ref-oraclejavahistory_27-0" class="reference"><a href="#cite_note-oraclejavahistory-27">[27]</a></sup> It promised <b>Write Once, Run Anywhere</b> (WORA) functionality, providing no-cost run-times on popular <a href="/wiki/Computing_platform" title="Computing platform">platforms</a>. Fairly secure and featuring configurable security, it allowed network- and file-access restrictions. Major <a href="/wiki/Web_browser" title="Web browser">web browsers</a> soon incorporated the ability to run <a href="/wiki/Java_applet" title="Java applet">Java applets</a> within web pages, and Java quickly became popular. The Java&nbsp;1.0 compiler was re-written <a href="/wiki/Bootstrapping_(compilers)" title="Bootstrapping (compilers)">in Java</a> by <a href="/wiki/Arthur_van_Hoff" title="Arthur van Hoff">Arthur van Hoff</a> to comply strictly with the Java&nbsp;1.0 language specification.<sup id="cite_ref-28" class="reference"><a href="#cite_note-28">[28]</a></sup> With the advent of Java&nbsp;2 (released initially as J2SE&nbsp;1.2 in December 1998&nbsp;? 1999), new versions had multiple configurations built for different types of platforms. J2EE included technologies and APIs for enterprise applications typically run in server environments, while J2ME featured APIs optimized for mobile applications. The desktop version was renamed J2SE. In 2006, for marketing purposes, Sun renamed new J2 versions as <i><a href="/wiki/Java_Platform,_Enterprise_Edition" title="Java Platform, Enterprise Edition">Java EE</a></i>, <i><a href="/wiki/Java_Platform,_Micro_Edition" title="Java Platform, Micro Edition">Java ME</a></i>, and <i><a href="/wiki/Java_Platform,_Standard_Edition" title="Java Platform, Standard Edition">Java SE</a></i>, respectively. </p>
<p>In 1997, Sun Microsystems approached the <a href="/wiki/ISO/IEC_JTC_1" title="ISO/IEC JTC 1">ISO/IEC JTC 1</a> standards body and later the <a href="/wiki/Ecma_International" title="Ecma International">Ecma International</a> to formalize Java, but it soon withdrew from the process.<sup id="cite_ref-29" class="reference"><a href="#cite_note-29">[29]</a></sup><sup id="cite_ref-30" class="reference"><a href="#cite_note-30">[30]</a></sup><sup id="cite_ref-31" class="reference"><a href="#cite_note-31">[31]</a></sup> Java remains a <a href="/wiki/De_facto_standard" title="De facto standard"><i>de facto</i> standard</a>, controlled through the <a href="/wiki/Java_Community_Process" title="Java Community Process">Java Community Process</a>.<sup id="cite_ref-32" class="reference"><a href="#cite_note-32">[32]</a></sup> At one time, Sun made most of its Java implementations available without charge, despite their <a href="/wiki/Proprietary_software" title="Proprietary software">proprietary software</a> status. Sun generated revenue from Java through the selling of licenses for specialized products such as the Java Enterprise System. </p>
<p>On November 13, 2006, Sun released much of its Java virtual machine (JVM) as <a href="/wiki/Free_and_open-source_software" title="Free and open-source software">free and open-source software</a> (FOSS), under the terms of the <a href="/wiki/GNU_General_Public_License" title="GNU General Public License">GNU General Public License</a> (GPL). On May 8, 2007, Sun finished the process, making all of its JVM's core code available under <a href="/wiki/Free_software" title="Free software">free software</a>/open-source distribution terms, aside from a small portion of code to which Sun did not hold the copyright.<sup id="cite_ref-33" class="reference"><a href="#cite_note-33">[33]</a></sup> </p>
<p>Sun's vice-president Rich Green said that Sun's ideal role with regard to Java was as an <i>evangelist</i>.<sup id="cite_ref-34" class="reference"><a href="#cite_note-34">[34]</a></sup> Following <a href="/wiki/Oracle_Corporation" title="Oracle Corporation">Oracle Corporation</a>'s acquisition of Sun Microsystems in 2009?10, Oracle has described itself as the steward of Java technology with a relentless commitment to fostering a community of participation and transparency.<sup id="cite_ref-35" class="reference"><a href="#cite_note-35">[35]</a></sup> This did not prevent Oracle from filing a lawsuit against Google shortly after that for using Java inside the <a href="/wiki/Android_SDK" class="mw-redirect" title="Android SDK">Android SDK</a> (see the <i><a href="#Android">Android</a></i> section). </p>
<p>On April 2, 2010, James Gosling resigned from <a href="/wiki/Oracle_Corporation" title="Oracle Corporation">Oracle</a>.<sup id="cite_ref-36" class="reference"><a href="#cite_note-36">[36]</a></sup> </p>
<p>In January 2016, Oracle announced that Java run-time environments based on JDK 9 will discontinue the browser plugin.<sup id="cite_ref-37" class="reference"><a href="#cite_note-37">[37]</a></sup> </p>
<p>Java software runs on everything from laptops to <a href="/wiki/Data_center" title="Data center">data centers</a>, <a href="/wiki/Video_game_console" title="Video game console">game consoles</a> to scientific <a href="/wiki/Supercomputer" title="Supercomputer">supercomputers</a>.<sup id="cite_ref-38" class="reference"><a href="#cite_note-38">[38]</a></sup> </p>
<p>There were five primary goals in the creation of the Java language:<sup id="cite_ref-design_goals_18-1" class="reference"><a href="#cite_note-design_goals-18">[18]</a></sup> </p>
<p>As of March&nbsp;2020<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Java_(programming_language)&amp;action=edit">[update]</a></sup>, Java&nbsp;8 and 11 are supported as Long Term Support (LTS) versions, and one later non-LTS version is supported. Major release versions of Java, along with their release dates: </p>
<p>Sun has defined and supports four editions of Java targeting different application environments and segmented many of its <a href="/wiki/Application_programming_interface" title="Application programming interface">APIs</a> so that they belong to one of the platforms. The platforms are: </p>
<p>The <a href="/wiki/Class_(computer_programming)" title="Class (computer programming)">classes</a> in the Java APIs are organized into separate groups called <a href="/wiki/Java_package" title="Java package">packages</a>. Each package contains a set of related <a href="/wiki/Interface_(Java)" title="Interface (Java)">interfaces</a>, classes, and <a href="/wiki/Exception_handling" title="Exception handling">exceptions</a>. Refer to the separate platforms for a description of the packages available.<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="/wiki/Wikipedia:TOPIC" class="mw-redirect" title="Wikipedia:TOPIC"><span title="The material in the vicinity of this tag may contain the information irrelevant to the section's main topic">relevant to this section?</span></a> <span class="metadata"> ? <a href="/wiki/Talk:Java_(programming_language)#Relevant" title="Talk:Java (programming language)">discuss</a></span></i>]</sup> </p>
<p>Sun also provided an edition called <a href="/wiki/PersonalJava" title="PersonalJava">Personal Java</a> that has been superseded by later, standards-based Java ME configuration-profile pairings. </p>
<p>One design goal of Java is portability, which means that programs written for the Java platform must run similarly on any combination of hardware and operating system with adequate run time support. This is achieved by compiling the Java language code to an intermediate representation called <a href="/wiki/Java_bytecode" title="Java bytecode">Java bytecode</a>, instead of directly to architecture-specific <a href="/wiki/Machine_code" title="Machine code">machine code</a>. Java bytecode instructions are analogous to machine code, but they are intended to be executed by a <a href="/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> (VM) written specifically for the host hardware. <a href="/wiki/End_user" title="End user">End users</a> commonly use a <a href="/wiki/Java_virtual_machine" title="Java virtual machine">Java Runtime Environment</a> (JRE) installed on their machine for standalone Java applications, or in a web browser for <a href="/wiki/Java_applet" title="Java applet">Java applets</a>. </p>
<p>Standard libraries provide a generic way to access host-specific features such as graphics, <a href="/wiki/Thread_(computing)" title="Thread (computing)">threading</a>, and <a href="/wiki/Computer_network" title="Computer network">networking</a>. </p>
<p>The use of universal bytecode makes porting simple. However, the overhead of <a href="/wiki/Interpreter_(computing)" title="Interpreter (computing)">interpreting</a> bytecode into machine instructions made interpreted programs almost always run more slowly than native <a href="/wiki/Executable" title="Executable">executables</a>. <a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">Just-in-time</a> (JIT) compilers that compile byte-codes to machine code during runtime were introduced from an early stage. Java itself is platform-independent and is adapted to the particular platform it is to run on by a <a href="/wiki/Java_virtual_machine" title="Java virtual machine">Java virtual machine</a> for it, which translates the <a href="/wiki/Java_bytecode" title="Java bytecode">Java bytecode</a> into the platform's machine language.<sup id="cite_ref-45" class="reference"><a href="#cite_note-45">[45]</a></sup> </p>
<p>Programs written in Java have a reputation for being slower and requiring more memory than those written in <a href="/wiki/C%2B%2B" title="C++">C++</a>.<sup id="cite_ref-46" class="reference"><a href="#cite_note-46">[46]</a></sup><sup id="cite_ref-47" class="reference"><a href="#cite_note-47">[47]</a></sup> However, Java programs' execution speed improved significantly with the introduction of <a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">just-in-time compilation</a> in 1997/1998 for <a href="/wiki/Java_version_history" title="Java version history">Java&nbsp;1.1</a>,<sup id="cite_ref-48" class="reference"><a href="#cite_note-48">[48]</a></sup> the addition of language features supporting better code analysis (such as inner classes, the StringBuilder class, optional assertions, etc.), and optimizations in the Java virtual machine, such as <a href="/wiki/HotSpot" title="HotSpot">HotSpot</a> becoming the default for Sun's JVM in 2000. With Java&nbsp;1.5, the performance was improved with the addition of the java.util.concurrent package, including <a href="/wiki/Lock_free" class="mw-redirect" title="Lock free">lock free</a> implementations of the <a href="/wiki/Java_ConcurrentMap" title="Java ConcurrentMap">ConcurrentMaps</a> and other multi-core collections, and it was improved further with Java&nbsp;1.6. </p>
<p>Some platforms offer direct hardware support for Java; there are micro controllers that can run Java bytecode in hardware instead of a software Java virtual machine,<sup id="cite_ref-49" class="reference"><a href="#cite_note-49">[49]</a></sup> and some <a href="/wiki/ARM_architecture" title="ARM architecture">ARM</a>-based processors could have hardware support for executing Java bytecode through their <a href="/wiki/Jazelle" title="Jazelle">Jazelle</a> option, though support has mostly been dropped in current implementations of ARM. </p>
<p>Java uses an <a href="/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">automatic garbage collector</a> to manage memory in the <a href="/wiki/Object_lifetime" title="Object lifetime">object lifecycle</a>. The programmer determines when objects are created, and the Java runtime is responsible for recovering the memory once objects are no longer in use. Once no references to an object remain, the <a href="/wiki/Unreachable_memory" title="Unreachable memory">unreachable memory</a> becomes eligible to be freed automatically by the garbage collector. Something similar to a <a href="/wiki/Memory_leak" title="Memory leak">memory leak</a> may still occur if a programmer's code holds a reference to an object that is no longer needed, typically when objects that are no longer needed are stored in containers that are still in use. If methods for a non-existent object are called, a <a href="/wiki/Null_pointer" title="Null pointer">null pointer</a> exception is thrown.<sup id="cite_ref-50" class="reference"><a href="#cite_note-50">[50]</a></sup><sup id="cite_ref-51" class="reference"><a href="#cite_note-51">[51]</a></sup> </p>
<p>One of the ideas behind Java's automatic memory management model is that programmers can be spared the burden of having to perform manual memory management. In some languages, memory for the creation of objects is implicitly allocated on the <a href="/wiki/Stack_(abstract_data_type)" title="Stack (abstract data type)">stack</a> or explicitly allocated and deallocated from the <a href="/wiki/Memory_management#DYNAMIC" title="Memory management">heap</a>. In the latter case, the responsibility of managing memory resides with the programmer. If the program does not deallocate an object, a <a href="/wiki/Memory_leak" title="Memory leak">memory leak</a> occurs. If the program attempts to access or deallocate memory that has already been deallocated, the result is undefined and difficult to predict, and the program is likely to become unstable or crash. This can be partially remedied by the use of <a href="/wiki/Smart_pointer" title="Smart pointer">smart pointers</a>, but these add overhead and complexity. Note that garbage collection does not prevent <a href="/wiki/Logical_address" title="Logical address">logical memory</a> leaks, i.e. those where the memory is still referenced but never used. </p>
<p>Garbage collection may happen at any time. Ideally, it will occur when a program is idle. It is guaranteed to be triggered if there is insufficient free memory on the heap to allocate a new object; this can cause a program to stall momentarily. Explicit memory management is not possible in Java. </p>
<p>Java does not support C/C++ style <a href="/wiki/Pointer_(computer_programming)" title="Pointer (computer programming)">pointer arithmetic</a>, where object addresses can be arithmetically manipulated (e.g. by adding or subtracting an offset). This allows the garbage collector to relocate referenced objects and ensures type safety and security. </p>
<p>As in C++ and some other object-oriented languages, variables of Java's <a href="/wiki/Primitive_data_type" title="Primitive data type">primitive data types</a> are either stored directly in fields (for objects) or on the <a href="/wiki/Stack-based_memory_allocation" title="Stack-based memory allocation">stack</a> (for methods) rather than on the heap, as is commonly true for non-primitive data types (but see <a href="/wiki/Escape_analysis" title="Escape analysis">escape analysis</a>). This was a conscious decision by Java's designers for performance reasons. </p>
<p>Java contains multiple types of garbage collectors. By default, HotSpot uses the <a href="/w/index.php?title=Parallel_scavenge_garbage_collector&amp;action=edit&amp;redlink=1" class="new" title="Parallel scavenge garbage collector (page does not exist)">parallel scavenge garbage collector</a>.<sup id="cite_ref-52" class="reference"><a href="#cite_note-52">[52]</a></sup> However, there are also several other garbage collectors that can be used to manage the heap. For 90% of applications in Java, the <a href="/wiki/Concurrent_mark_sweep_collector" title="Concurrent mark sweep collector">Concurrent Mark-Sweep</a> (CMS) garbage collector is sufficient.<sup id="cite_ref-53" class="reference"><a href="#cite_note-53">[53]</a></sup> Oracle aims to replace CMS with the <a href="/wiki/Garbage-first_collector" title="Garbage-first collector">Garbage-First Collector</a> (G1).<sup id="cite_ref-54" class="reference"><a href="#cite_note-54">[54]</a></sup> </p>
<p>Having solved the memory management problem does not relieve the programmer of the burden of handling properly other kind of resources, like network or database connections, file handles, etc., especially in the presence of exceptions. <span class="citation-needed-content" style="padding-left:0.1em; padding-right:0.1em; color:#595959; border:1px solid #DDD;">Paradoxically, the presence of a garbage collector has faded the necessity of having an explicit destructor method in the classes, thus rendering the management of these other resources more difficult.</span><sup class="noprint Inline-Template Template-Fact" style="margin-left:0.1em; white-space:nowrap;">[<i><a href="/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2019)">citation needed</span></a></i>]</sup> </p>
<p>The syntax of Java is largely influenced by <a href="/wiki/C%2B%2B" title="C++">C++</a>. Unlike C++, which combines the syntax for structured, generic, and object-oriented programming, Java was built almost exclusively as an object-oriented language.<sup id="cite_ref-design_goals_18-2" class="reference"><a href="#cite_note-design_goals-18">[18]</a></sup> All code is written inside classes, and every data item is an object, with the exception of the primitive data types, (i.e. integers, floating-point numbers, <a href="/wiki/Boolean_data_type" title="Boolean data type">boolean values</a>, and characters), which are not objects for performance reasons. Java reuses some popular aspects of C++ (such as the <code class="mw-highlight mw-highlight-lang-java" dir="ltr"><span class="n">printf</span></code> method). </p>
<p>Unlike C++, Java does not support <a href="/wiki/Operator_overloading" title="Operator overloading">operator overloading</a><sup id="cite_ref-msdn_operator_overloading_55-0" class="reference"><a href="#cite_note-msdn_operator_overloading-55">[55]</a></sup> or <a href="/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> for classes, though multiple inheritance is supported for <a href="/wiki/Interface_(Java)" title="Interface (Java)">interfaces</a>.<sup id="cite_ref-oracle_multiple_inheritance_56-0" class="reference"><a href="#cite_note-oracle_multiple_inheritance-56">[56]</a></sup> </p>

...
 */
    }
}